---
title: "ABG-VBG Analysis"
author: "Brian Locke, Anila Mehta"
format: html
editor: visual
---

This is a Quarto notebook - which is helpful for 'literate programming' - see here (basically, showing your work with statistical programming)

Here's some tips/tricks for quarto - <https://www.productive-r-workflow.com/quarto-tricks>

## Data Pre-processing

This code pulls in the master database (a STATA file) and does some initial cleaning - this will only need to be run once, and then the data can be accessed in the usual way.

```{r}
# Install necessary packages (if not already installed)
if (!requireNamespace("haven", quietly = TRUE)) install.packages("haven")
if (!requireNamespace("labelled", quietly = TRUE)) install.packages("labelled")
if (!requireNamespace("codebookr", quietly = TRUE)) install.packages("codebookr")

# Load libraries
library(haven)
library(labelled)
library(codebookr)
```

This code converts the data from a STATA format to rdata if the rdata file does not exist. If it does already exist, it just loads that.

```{r}
# Define file paths
data_dir_name <- "data"
rdata_file <- file.path(data_dir_name, "full_trinetx.rdata")
stata_file <- file.path(data_dir_name, "full_db.dta")

# Ensure the directory exists
if (!dir.exists(data_dir_name)) {
  dir.create(data_dir_name)
  message("Directory 'data' created.")
} else {
  message("Directory 'data' already exists.")
}

# Check if the RData file exists
if (file.exists(rdata_file)) {
  # Load the existing RData file
  load(rdata_file)
  message("Loaded existing dataset from 'full_trinetx.rdata'.")
} else {
  # Read Stata dataset
  message("RData file not found. Reading Stata dataset...")
  stata_data <- read_dta(stata_file)
  
  # Check variable labels
  message("Extracting variable labels...")
  var_label(stata_data)

  # Check value labels
  message("Extracting value labels...")
  sapply(stata_data, function(x) if (is.labelled(x)) val_labels(x))

  # Save the dataset in RData format
  save(stata_data, file = rdata_file)
  message("Dataset saved as 'full_trinetx.rdata'.")

  # Load the newly created RData file
  load(rdata_file)
  message("Loaded newly saved dataset from 'full_trinetx.rdata'.")
}

```

Creating subset_data

```{r}
set.seed(123)
rows_to_keep <- round(nrow(stata_data) * 0.05)
subset_data <- stata_data[sample(nrow(stata_data), rows_to_keep), ]
dim(subset_data)
```

```{r}
# Generate the codebook for the dataset
message("Generating codebook for the dataset...")
study_codebook <- codebookr::codebook(
  stata_data,
  title = "Full TrinetX",
  subtitle = "Dataset Documentation",
  description = "This dataset contains patient-level records from the TrinetX database. 
                 It has been processed and converted from the original Stata file."
)

codebook_file <- file.path(data_dir_name, "codebookr.docx")
print(study_codebook, codebook_file)
message("Codebook saved as 'codebookr.docx' in the data directory.")
```

Here are a few references that might be helpful for learning R:

University of Utah Resource <https://uofudelphi-r-23-08-21.netlify.app/>

More in depth resource/book <https://r4ds.hadley.nz/>

and slightly more advanced: <https://rap4mads.eu/03-functional-programming.html>

style guide for how to name things <https://style.tidyverse.org/syntax.html>

**Some example data visualizations**

Summary Statistics:

```{r}
# Use base R's summary() function
summary(subset_data)
```

Raw Data

```{r}
# Install necessary package if not already installed
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")

# Load the dplyr package
library(dplyr)

# Analyze the dataset structure using glimpse()
glimpse(subset_data)

```

More detailed - separated by character, date, and numeric datatypes

```{r}
# Install necessary package if not already installed
if (!requireNamespace("skimr", quietly = TRUE)) install.packages("skimr")

# Load the skimr package
library(skimr)

# Generate a detailed summary using skim()
skim(subset_data)
```

More in depth - interactive HTML

```{r}
# Install necessary package if not already installed
if (!requireNamespace("summarytools", quietly = TRUE)) install.packages("summarytools")

# Load the summarytools package
library(summarytools)

# Generate a data frame summary report
dfSummary(subset_data)
```

Some regression stuff:

```{r}
# Install necessary packages if not installed
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("performance", quietly = TRUE)) install.packages("performance")
if (!requireNamespace("ggeffects", quietly = TRUE)) install.packages("ggeffects")
if (!requireNamespace("sjPlot", quietly = TRUE)) install.packages("sjPlot")
if (!requireNamespace("gtsummary", quietly = TRUE)) install.packages("gtsummary")
if (!requireNamespace("vip", quietly = TRUE)) install.packages("vip")

#Missing package1
install.packages("gridExtra")
library(gridExtra)

# Load required libraries
library(tidyverse)      # Data manipulation & visualization
library(performance)    # Model assumption checks
library(ggeffects)      # Effect visualization
library(sjPlot)         # Grid plotting for ggplots
library(gtsummary)      # Regression table
library(vip)            # Variable importance

# Set theme for plots
theme_set(theme_bw())

------#This was practice stuff------
# Get & Prepare Data 
# Assuming `stata_data` is the cleaned dataset
#bmi_data <- subset_data |> 
  #filter(!is.na(bmi), !is.na(age_at_encounter), !is.na(sex)) |>  # Remove missing values
  #mutate(
    #sex = as.factor(sex),                 # Convert sex to categorical
    #age_at_encounter = as.numeric(age_at_encounter), 
    #bmi = as.numeric(bmi)                 # Ensure BMI is numeric
  #)

# Build the Model
#bmi_model <- lm(bmi ~ sex + age_at_encounter, data = bmi_data)

# Check all model assumptions visually
#bmi_model |> performance::check_model()

# Visualize predictions
#bmi_model |> 
  #ggeffects::ggpredict() |> 
  #plot() |> 
  #sjPlot::plot_grid()

# Get regression table with p-values
#bmi_model |> 
  #gtsummary::tbl_regression(exponentiate = FALSE, add_pairwise_contrasts = TRUE)

# Get variable importance
#bmi_model |> vip::vip()

# Check model quality
#bmi_model |> performance::performance()
```

```{r}
# Install necessary packages if not installed
if (!requireNamespace("performance", quietly = TRUE)) install.packages("performance")

# Load required packages
library(performance)

-------#Practice stuff---------
# Assuming `stata_data` is your cleaned dataset
# Ensure variables are in the correct format
subset_data$sex <- as.factor(subset_data$sex)  # Convert sex to categorical variable
subset_data$age_at_encounter <- as.numeric(subset_data$age_at_encounter)  # Ensure age is numeric
subset_data$curr_bmi <- as.numeric(subset_data$curr_bmi)  # Ensure BMI is numeric

# Fit the linear regression model
bmi_model <- lm(curr_bmi ~ sex + age_at_encounter, data = subset_data)

# Check model assumptions
check_model(bmi_model)
```

Here are a few references that might be helpful for visualizations:

[https://grantmcdermott.com/tinyplot/](https://grantmcdermott.com/tinyplot/?utm_campaign=Data_Elixir&utm_source=Data_Elixir_522)

\-\-\-\-\-\--

Table 1: Variable description

```{r}
library(dplyr)
library(tidyr)
library(labelled)

summary_table <- subset_data %>%
  transmute(
    sex = factor(ifelse(sex == 0, "Female", "Male")),  # Convert 'sex' to factor
    race = to_factor(race),  # Safely convert 'race' to factor using 'to_factor'
    osa = factor(ifelse(osa == 1, "Yes", "No")),
    asthma = factor(ifelse(asthma == 1, "Yes", "No")),
    copd = factor(ifelse(copd == 1, "Yes", "No")),
    chf = factor(ifelse(chf == 1, "Yes", "No"))
  ) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Category") %>%
  group_by(Variable, Category) %>%
  summarise(Count = n(), .groups = "drop") %>%
  group_by(Variable) %>%
  mutate(Percent = round(Count / sum(Count) * 100, 1)) %>%
  arrange(Variable, desc(Count))

# View the resulting table
print(summary_table)

```

```{r}
# Recode and calculate for 'sex'
subset_data$sex <- as.numeric(as.character(subset_data$sex))
subset_data$sex_label <- factor(subset_data$sex,
                                levels = c(0, 1),
                                labels = c("Female", "Male"))

sex_counts <- table(subset_data$sex_label)
sex_percent <- prop.table(sex_counts) * 100
sex_table <- data.frame(
  Sex = names(sex_counts),
  Count = as.vector(sex_counts),
  Percentage = round(sex_percent, 2)
)

print(sex_table)

# Repeat for 'race'
subset_data$race <- as.numeric(as.character(subset_data$race))
subset_data$race_label <- factor(subset_data$race,
                                 levels = c(0, 1, 2, 3, 4, 5),
                                 labels = c("White", "Black or African American", "Unknown", "Asian", "American Indian", "Pacific Islander"))

race_counts <- table(subset_data$race_label)
race_percent <- prop.table(race_counts) * 100
race_table <- data.frame(
  Race = names(race_counts),
  Count = as.vector(race_counts),
  Percentage = round(race_percent, 2)
)

print(race_table)

# Repeat for other categorical variables
# 'osa'
subset_data$osa_label <- factor(subset_data$osa, levels = c(0, 1), labels = c("No", "Yes"))
osa_counts <- table(subset_data$osa_label)
osa_percent <- prop.table(osa_counts) * 100
osa_table <- data.frame(
  OSA = names(osa_counts),
  Count = as.vector(osa_counts),
  Percentage = round(osa_percent, 2)
)

print(osa_table)

# 'asthma'
subset_data$asthma_label <- factor(subset_data$asthma, levels = c(0, 1), labels = c("No", "Yes"))
asthma_counts <- table(subset_data$asthma_label)
asthma_percent <- prop.table(asthma_counts) * 100
asthma_table <- data.frame(
  Asthma = names(asthma_counts),
  Count = as.vector(asthma_counts),
  Percentage = round(asthma_percent, 2)
)

print(asthma_table)

# 'copd'
subset_data$copd_label <- factor(subset_data$copd, levels = c(0, 1), labels = c("No", "Yes"))
copd_counts <- table(subset_data$copd_label)
copd_percent <- prop.table(copd_counts) * 100
copd_table <- data.frame(
  COPD = names(copd_counts),
  Count = as.vector(copd_counts),
  Percentage = round(copd_percent, 2)
)

print(copd_table)

# 'chf'
subset_data$chf_label <- factor(subset_data$chf, levels = c(0, 1), labels = c("No", "Yes"))
chf_counts <- table(subset_data$chf_label)
chf_percent <- prop.table(chf_counts) * 100
chf_table <- data.frame(
  CHF = names(chf_counts),
  Count = as.vector(chf_counts),
  Percentage = round(chf_percent, 2)
)

print(chf_table)

```

```{r}
#Continuous variables for Table 1

vars <- c("age_at_encounter", "curr_bmi", "vbg_co2", "paco2")

summary_table <- data.frame(
  Variable = vars,
  Mean = sapply(subset_data[vars], function(x) mean(x, na.rm = TRUE)),
  SD = sapply(subset_data[vars], function(x) sd(x, na.rm = TRUE)),
  Median = sapply(subset_data[vars], function(x) median(x, na.rm = TRUE)),
  Q1 = sapply(subset_data[vars], function(x) quantile(x, 0.25, na.rm = TRUE)),
  Q3 = sapply(subset_data[vars], function(x) quantile(x, 0.75, na.rm = TRUE)),
  Min = sapply(subset_data[vars], function(x) min(x, na.rm = TRUE)),
  Max = sapply(subset_data[vars], function(x) max(x, na.rm = TRUE))
)

print(summary_table)
```

```{r}
install.packages(c("gtsummary", "dplyr", "flextable", "officer"))
```

```{r}
#Table 1A and 1B Baseline Characteristics
library(gtsummary)
library(dplyr)
library(haven)

subset_data <- subset_data %>%
  mutate(across(c(has_abg, has_vbg, hypercap_on_abg, hypercap_on_vbg), ~ as.numeric(.))) %>%
  mutate(
    abg_group = case_when(
      has_abg == 0 ~ "No ABG",
      has_abg == 1 & hypercap_on_abg == 0 ~ "ABG_NoHypercapnia",
      has_abg == 1 & hypercap_on_abg == 1 ~ "ABG_Hypercapnia"
    ),
    vbg_group = case_when(
      has_vbg == 0 ~ "No VBG",
      has_vbg == 1 & hypercap_on_vbg == 0 ~ "VBG_NoHypercapnia",
      has_vbg == 1 & hypercap_on_vbg == 1 ~ "VBG_Hypercapnia"
    ),
    abg_group = factor(abg_group, levels = c("No ABG", "ABG_NoHypercapnia", "ABG_Hypercapnia")),
    vbg_group = factor(vbg_group, levels = c("No VBG", "VBG_NoHypercapnia", "VBG_Hypercapnia")),
    sex_label = factor(sex, levels = c(0, 1), labels = c("Female", "Male")), race_label = factor(race, levels = c(0, 1, 2, 3, 4, 5), labels = c("White", "Black or African American", "Unknown", "Asian", "American Indian", "Pacific Islander")), osa_label = factor(osa, levels = c(0, 1), labels = c("No", "Yes")), asthma_label = factor(asthma, levels = c(0, 1), labels = c("No", "Yes")), copd_label = factor(copd, levels = c(0, 1), labels = c("No", "Yes")), chf_label = factor(chf, levels = c(0, 1), labels = c("No", "Yes")), nmd_label = factor(nmd, levels = c(0,1), labels = c("No", "Yes")), phtn_label = factor(phtn, levels = c(0,1), labels = c("No", "Yes")), ckd_label = factor(ckd,levels = c(0,1), labels = c("No", "Yes")), diabetes_label = factor (dm, levels = c(0,1), labels = c("No", "Yes")))

vars <- c("age_at_encounter", "curr_bmi", "sex_label", "race_label", "osa_label", "asthma_label", "copd_label", "chf_label", "nmd_label", "phtn_label", "ckd_label", "diabetes_label", "vbg_co2", "paco2")

make_table1 <- function(data, group_var, caption = "") {
  data %>%
    select(all_of(c(group_var, vars))) %>%
    tbl_summary(
      by = all_of(group_var),
      type = list(sex_label ~ "categorical"),
      statistic = list(all_continuous() ~ "{mean} ± {sd}"),
      digits = all_continuous() ~ 1,
      missing = "no"
    ) %>%
    modify_header(label = "**Variable**") %>%
    modify_caption(caption)
}

table1A <- make_table1(subset_data, "abg_group")
table1B <- make_table1(subset_data, "vbg_group")

table1A
table1B
```

```{r}
#Generating Word Doc for Table 1A and 1B
library(gtsummary)
library(flextable)
library(officer)

ft_table1A <- as_flex_table(table1A)
ft_table1B <- as_flex_table(table1B)

doc <- read_docx() %>%
  body_add_par("Table 1A. Baseline Characteristics by ABG Group", style = "heading 1") %>%
  body_add_flextable(ft_table1A) %>%
  body_add_par("Table 1B. Baseline Characteristics by VBG Group", style = "heading 1") %>%
  body_add_flextable(ft_table1B)

print(doc, target = "Table1_ABG_VBG.docx")

```

```{r}
install.packages("janitor")
install.packages("tibble")

library(tibble)
```

\[BL Edit 4/26/2025\] I broke this block up into smaller chunks to troubleshoot individually

Previously, you did a recoding for the imv_proc, niv_proc, died, and hypercap_resp_failure variables... but they're actually already in 0 and 1 format.

So you can just start doing the regressions

```{r}
#ABG
library(broom)
logit_intubated_abg <- glm(imv_proc ~ hypercap_on_abg, data = subset_data, family = binomial)
summary(logit_intubated_abg)

tidy(logit_intubated_abg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_niv_abg <- glm(niv_proc ~ hypercap_on_abg, data = subset_data, family = binomial)
summary(logit_niv_abg)

tidy(logit_niv_abg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_death_abg <- glm(died ~ hypercap_on_abg, data = subset_data, family = binomial)
summary(logit_death_abg)
tidy(logit_death_abg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_icd_abg <- glm(hypercap_resp_failure ~ hypercap_on_abg, data = subset_data, family = binomial)
summary(logit_icd_abg)
tidy(logit_icd_abg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

```

```{r}
if (!requireNamespace("modelsummary", quietly = TRUE)) install.packages("modelsummary")
library(modelsummary)

modelsummary(
  list("Intubated" = logit_intubated_abg,
       "NIV"       = logit_niv_abg,
       "Death"     = logit_death_abg,
       "ICD Hyper" = logit_icd_abg),
  exponentiate = TRUE,
  conf_level   = 0.95,
  estimate     = "{estimate}",
  statistic    = "({conf.low}, {conf.high})",
  coef_omit    = "(Intercept)",
  gof_omit     = ".*",                      # drop all goodness-of-fit rows
  fmt          = 2,                         # 2 decimal places everywhere
  output       = "gt"
) |>
  gt::tab_header(title = "Odds Ratios for ABG Hypercapnia (>45 mmHg)'s association with...")
```

```{r}
#VBG
library(broom)

logit_intubated_vbg <- glm(imv_proc ~ hypercap_on_vbg, data = subset_data, family = binomial)
summary(logit_intubated_vbg)
tidy(logit_intubated_vbg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_niv_vbg <- glm(niv_proc ~ hypercap_on_vbg, data = subset_data, family = binomial)
summary(logit_niv_vbg)
tidy(logit_niv_vbg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_death_vbg <- glm(died ~ hypercap_on_vbg, data = subset_data, family = binomial)
summary(logit_death_vbg)
tidy(logit_death_vbg,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_icd_vbg <- glm(hypercap_resp_failure ~ hypercap_on_vbg, data = subset_data, family = binomial)
summary(logit_icd_vbg)
tidy(logit_icd_vbg,
     exponentiate = TRUE,   # turns log-odds → OR
      conf.int     = TRUE)   # adds 95 % CI
```

```{r}
if (!requireNamespace("modelsummary", quietly = TRUE)) install.packages("modelsummary")
library(modelsummary)

modelsummary(
  list("Intubated" = logit_intubated_vbg,
       "NIV"       = logit_niv_vbg,
       "Death"     = logit_death_vbg,
       "ICD Hyper" = logit_icd_vbg),
  exponentiate = TRUE,
  conf_level   = 0.95,
  estimate     = "{estimate}",
  statistic    = "({conf.low}, {conf.high})",
  coef_omit    = "(Intercept)",
  gof_omit     = ".*",                      # drop all goodness-of-fit rows
  fmt          = 2,                         # 2 decimal places everywhere
  output       = "gt"
) |>
  gt::tab_header(title = "Odds Ratios for VBG Hypercapnia (>45 mmHg)'s association with...")
```

```{r}
#Calculate ABG from VBG using Farkas equation  

subset_data <- subset_data %>%
  mutate(
    calc_abg = vbg_co2 - (0.22 * (93 - vbg_o2sat))
  )

subset_data <- subset_data %>%
  mutate(
    hypercapnia_calc = ifelse(calc_abg > 45, 1, 0)
  )

with(subset_data, table(hypercapnia_calc, niv_proc))
```

```{r}
#VBG Calculated to ABG
library(broom)
logit_intubated_calc <- glm(imv_proc ~ hypercapnia_calc, data = subset_data, family = binomial)
summary(logit_intubated_calc)

tidy(logit_intubated_calc,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_niv_calc <- glm(niv_proc ~ hypercapnia_calc, data = subset_data, family = binomial)
summary(logit_niv_calc)

tidy(logit_niv_calc,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_death_calc <- glm(died ~ hypercapnia_calc, data = subset_data, family = binomial)
summary(logit_death_calc)

tidy(logit_death_calc,
     exponentiate = TRUE,   # turns log-odds → OR
     conf.int     = TRUE)   # adds 95 % CI

logit_icd_calc <- glm(hypercap_resp_failure ~ hypercapnia_calc, data = subset_data, family = binomial)
summary(logit_icd_calc)

tidy(logit_icd_calc,
     exponentiate = TRUE,   # turns log-odds → OR
      conf.int     = TRUE)   # adds 95 % CI
```

```{r}
if (!requireNamespace("modelsummary", quietly = TRUE)) install.packages("modelsummary")
library(modelsummary)

modelsummary(
  list("Intubated" = logit_intubated_calc,
       "NIV"       = logit_niv_calc,
       "Death"     = logit_death_calc,
       "ICD Hyper" = logit_icd_calc),
  exponentiate = TRUE,
  conf_level   = 0.95,
  estimate     = "{estimate}",
  statistic    = "({conf.low}, {conf.high})",
  coef_omit    = "(Intercept)",
  gof_omit     = ".*",                      # drop all goodness-of-fit rows
  fmt          = 2,                         # 2 decimal places everywhere
  output       = "gt"
) |>
  gt::tab_header(title = "Odds Ratios for Calculated Hypercapnia (>45 mmHg)'s association with...")
```

```{r}
library(broom)
library(dplyr)
library(ggplot2)

# --- Tidy function to label model results ---
tidy_with_labels <- function(model, group_label, outcome_label) {
  tidy(model, exponentiate = TRUE, conf.int = TRUE) %>%
    filter(term == "hypercap_on_abg" | term == "hypercap_on_vbg" | term == "hypercapnia_calc") %>%
    mutate(
      group = group_label,
      outcome = outcome_label
    )
}

# --- ABG Models ---
abg_intub <- tidy_with_labels(glm(imv_proc ~ hypercap_on_abg, data = subset_data, family = binomial), "ABG", "Intubation")
abg_niv   <- tidy_with_labels(glm(niv_proc ~ hypercap_on_abg, data = subset_data, family = binomial), "ABG", "NIV")
abg_death <- tidy_with_labels(glm(died ~ hypercap_on_abg, data = subset_data, family = binomial), "ABG", "Death")
abg_icd   <- tidy_with_labels(glm(hypercap_resp_failure ~ hypercap_on_abg, data = subset_data, family = binomial), "ABG", "ICD Code")

# --- VBG Models ---
vbg_intub <- tidy_with_labels(glm(imv_proc ~ hypercap_on_vbg, data = subset_data, family = binomial), "VBG", "Intubation")
vbg_niv   <- tidy_with_labels(glm(niv_proc ~ hypercap_on_vbg, data = subset_data, family = binomial), "VBG", "NIV")
vbg_death <- tidy_with_labels(glm(died ~ hypercap_on_vbg, data = subset_data, family = binomial), "VBG", "Death")
vbg_icd   <- tidy_with_labels(glm(hypercap_resp_failure ~ hypercap_on_vbg, data = subset_data, family = binomial), "VBG", "ICD Code")

# --- Calculated ABG Models ---
calc_intub <- tidy_with_labels(glm(imv_proc ~ hypercapnia_calc, data = subset_data, family = binomial), "Calculated ABG", "Intubation")
calc_niv   <- tidy_with_labels(glm(niv_proc ~ hypercapnia_calc, data = subset_data, family = binomial), "Calculated ABG", "NIV")
calc_death <- tidy_with_labels(glm(died ~ hypercapnia_calc, data = subset_data, family = binomial), "Calculated ABG", "Death")
calc_icd   <- tidy_with_labels(glm(hypercap_resp_failure ~ hypercapnia_calc, data = subset_data, family = binomial), "Calculated ABG", "ICD Code")

# --- Combine all model results ---
combined_or_df <- bind_rows(
  abg_intub, abg_niv, abg_death, abg_icd,
  vbg_intub, vbg_niv, vbg_death, vbg_icd,
  calc_intub, calc_niv, calc_death, calc_icd
)

```

```{r}
library(ggplot2)
ggplot(combined_or_df, aes(x = outcome, y = estimate, ymin = conf.low, ymax = conf.high, color = group)) +
  geom_pointrange(position = position_dodge(width = 0.5), size = 0.6) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "gray40") +
  coord_flip() +
  labs(
    title = "Odds Ratios by Group and Clinical Outcome",
    x = "Outcome",
    y = "Odds Ratio (95% CI)",
    color = "Group"
  ) +
  scale_y_log10(limits = c(0.8, 15)) +  # optional log scale for better spacing
  theme_minimal(base_size = 10)

combined_or_df$group <- factor(combined_or_df$group,
  levels = c("ABG", "VBG", "Calculated ABG"))
```
