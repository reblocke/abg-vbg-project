---
title: "ABG-VBG Analysis"
author: "Brian Locke, Anila Mehta"
format: html
editor: visual
---

This is a Quarto notebook - which is helpful for 'literate programming' - see here (basically, showing your work with statistical programming)

Here's some tips/tricks for quarto - <https://www.productive-r-workflow.com/quarto-tricks>

## Data Pre-processing

This code pulls in the master database (a STATA file) and does some initial cleaning - this will only need to be run once, and then the data can be accessed in the usual way.

```{r}
# Install necessary packages (if not already installed)
if (!requireNamespace("haven", quietly = TRUE)) install.packages("haven")
if (!requireNamespace("labelled", quietly = TRUE)) install.packages("labelled")
if (!requireNamespace("codebookr", quietly = TRUE)) install.packages("codebookr")

# Load libraries
library(haven)
library(labelled)
library(codebookr)
```

This code converts the data from a STATA format to rdata if the rdata file does not exist. If it does already exist, it just loads that.

```{r}
# Define file paths
data_dir_name <- "data"
rdata_file <- file.path(data_dir_name, "full_trinetx.rdata")
stata_file <- file.path(data_dir_name, "full_db.dta")

# Ensure the directory exists
if (!dir.exists(data_dir_name)) {
  dir.create(data_dir_name)
  message("Directory 'data' created.")
} else {
  message("Directory 'data' already exists.")
}

if (file.exists(rdata_file)) {
  # 1) Load the existing RData file
  load(rdata_file)
  message("Loaded existing dataset from '", rdata_file, "'.")
  
} else if (file.exists(stata_file)) {
  # 2) RData file not found, but the Stata file is available
  message("RData file not found. Reading Stata dataset...")
  stata_data <- haven::read_dta(stata_file)

  # Inspect variable labels (optional)
  message("Extracting variable labels...")
  # var_label(stata_data)  # if you want to just look at them, remove the # comment

  # Inspect value labels (optional)
  message("Extracting value labels...")
  # sapply(stata_data, function(x) if (haven::is.labelled(x)) haven::val_labels(x))

  # Save the dataset in RData format
  save(stata_data, file = rdata_file)
  message("Dataset saved as '", rdata_file, "'.")

  # Load the newly created RData file
  load(rdata_file)
  message("Loaded newly saved dataset from '", rdata_file, "'.")

} else {
  # 3) Neither the Stata file nor the RData file exists
  stop(
    "Neither the specified RData file (", rdata_file, 
    ") nor the Stata file (", stata_file, ") could be found."
  )
}
```

```{r}
# Generate the codebook for the dataset
message("Generating codebook for the dataset...")
study_codebook <- codebookr::codebook(
  stata_data,
  title = "Full TrinetX",
  subtitle = "Dataset Documentation",
  description = "This dataset contains patient-level records from the TrinetX database. 
                 It has been processed and converted from the original Stata file."
)

# Save the codebook as a Word document
codebook_file <- file.path(data_dir_name, "codebookr.docx")
print(study_codebook, codebook_file)
message("Codebook saved as 'codebookr.docx' in the data directory.")

```

Here are a few references that might be helpful for learning R:

University of Utah Resource <https://uofudelphi-r-23-08-21.netlify.app/>

More in depth resource/book <https://r4ds.hadley.nz/>

and slightly more advanced: <https://rap4mads.eu/03-functional-programming.html>

style guide for how to name things <https://style.tidyverse.org/syntax.html>

**Some example data visualizations**

Summary Statistics:

```{r}
# Use base R's summary() function
summary(stata_data)
```

```{r}
# If your data frame is called stata_data, do:
summary(stata_data[, c("los", "curr_bmi")])
```

Raw Data

```{r}
# Install necessary package if not already installed
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")

# Load the dplyr package
library(dplyr)

# Analyze the dataset structure using glimpse()
glimpse(stata_data)

```

More detailed - separated by character, date, and numeric datatypes

```{r}
# Install necessary package if not already installed
if (!requireNamespace("skimr", quietly = TRUE)) install.packages("skimr")

# Load the skimr package
library(skimr)

# Generate a detailed summary using skim()
skim(stata_data)
```

More in depth - interactive HTML

```{r}
# Install necessary package if not already installed
if (!requireNamespace("summarytools", quietly = TRUE)) install.packages("summarytools")

# Load the summarytools package
library(summarytools)

stata_data <- stata_data |> 
  mutate(
    across(
      .cols = where(haven::is.labelled),  # find columns with haven_labelled class
      .fns  = haven::as_factor           # convert them to factors
    )
  )

# Generate a data frame summary report
dfSummary(stata_data)
```

Some regression stuff:

```{r}
# Convert tibble "stata_data" to a base R data frame
stata_data_df <- as.data.frame(stata_data)


```

```{r}
# Install necessary packages if not installed
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("performance", quietly = TRUE)) install.packages("performance")
if (!requireNamespace("ggeffects", quietly = TRUE)) install.packages("ggeffects")
if (!requireNamespace("sjPlot", quietly = TRUE)) install.packages("sjPlot")
if (!requireNamespace("gtsummary", quietly = TRUE)) install.packages("gtsummary")
if (!requireNamespace("vip", quietly = TRUE)) install.packages("vip")

# Load required libraries
library(tidyverse)      # Data manipulation & visualization
library(performance)    # Model assumption checks
library(ggeffects)      # Effect visualization
library(sjPlot)         # Grid plotting for ggplots
library(gtsummary)      # Regression table
library(vip)            # Variable importance

# Set theme for plots
theme_set(theme_bw())

# Get & Prepare Data 
# Assuming `stata_data_df` is the cleaned dataset
library(dplyr)
library(haven)

bmi_data <- stata_data_df |>  
  filter(
    !is.na(bmi), 
    !is.na(age_at_encounter), 
    !is.na(sex)
  ) |>  
  mutate(
    sex = haven::as_factor(sex),                # Convert haven_labelled -> factor
    age_at_encounter = as.numeric(age_at_encounter),  
    bmi = as.numeric(bmi)                      
  )

# Build the Model
bmi_model <- lm(bmi ~ sex + age_at_encounter, data = bmi_data)

# Check all model assumptions visually
 bmi_model |> performance::check_model()

# Visualize predictions
bmi_model |> 
  ggeffects::ggpredict() |> 
  plot() |> 
  sjPlot::plot_grid()

# Get regression table with p-values
bmi_model |> 
  gtsummary::tbl_regression(exponentiate = FALSE, add_pairwise_contrasts = TRUE)

# Get variable importance
bmi_model |> vip::vip()

# Check model quality
bmi_model |> performance::performance()
```

```{r}
# Install necessary packages if not installed
if (!requireNamespace("performance", quietly = TRUE)) install.packages("performance")

# Load required packages
library(performance)

# Assuming `stata_data_df` is your cleaned dataset
# Ensure variables are in the correct format
stata_data_df$sex <- as.factor(stata_data_df$sex)  # Convert sex to categorical variable
stata_data_df$age_at_encounter <- as.numeric(stata_data_df$age_at_encounter)  # Ensure age is numeric
stata_data_df$bmi <- as.numeric(stata_data_df$bmi)  # Ensure BMI is numeric

# Fit the linear regression model
bmi_model <- lm(curr_bmi ~ sex + age_at_encounter, data = stata_data_df)

# Check model assumptions
check_model(bmi_model)
```

Here are a few references that might be helpful for visualizations:

Tiny plot = simple graphics [https://grantmcdermott.com/tinyplot/](https://grantmcdermott.com/tinyplot/?utm_campaign=Data_Elixir&utm_source=Data_Elixir_522)

Ggcoef stats for regression model coefficients <https://x.com/joachimschork/status/1858273162720325758?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Gg4x another way to do simple plotting <https://x.com/joachimschork/status/1856461224718012719?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Ggbetween comparisons between groups <https://x.com/joachimschork/status/1855374059887882410?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

```{r}
# Install ggstatsplot if not already
install.packages("ggstatsplot")

library(dplyr)
library(haven)
library(ggstatsplot)

# Prepare data: convert to factor, remove missing values
stata_data_df_clean <- stata_data_df %>%
  filter(!is.na(curr_bmi), !is.na(sex)) %>%
  mutate(sex = haven::as_factor(sex))  # or `sex = factor(sex)` if numeric

# Visualize difference in curr_bmi between groups (sex=0/1)
ggbetweenstats(
  data       = stata_data_df_clean,
  x          = sex,       # grouping variable
  y          = curr_bmi,  # outcome
  title      = "Difference in Current BMI by Sex Group",
  ggtheme    = ggplot2::theme_bw()
)
```

Ggpubplot. - shortcuts to make some nice looking plots <https://x.com/joachimschork/status/1853388159721066737?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

ggside - https://cran.r-project.org/web/packages/ggside/vignettes/ggside_basic_usage.html

Upset plot <https://x.com/mdancho84/status/1848690432210870695?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

<https://x.com/mdancho84/status/1849772573845836032?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Best packages for Viz <https://r-graph-gallery.com/best-dataviz-packages.html>

Raincloud plots (medium) <https://x.com/rmarkdown/status/1831633403248095678?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Correlation visualization: <https://x.com/yuzar___/status/1836800841941983377?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Saving vectorized Figs <https://x.com/leonardojo/status/1828773827134062967?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

tiny table - https://vincentarelbundock.github.io/tinytable/ 

Workflow for propensity matched, imputed analysis: <https://solomonkurz.netlify.app/blog/2025-02-02-matching-missing-data-a-quasi-experiment-and-causal-inference-oh-my/> 

GIF animations <https://gist.github.com/carlislerainey/b87600c3314e1829a10b43d0c4617762> 

Visualize nested variables <https://x.com/rfunctionaday/status/1418069470195724288?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

\- nice forest plot in R <https://x.com/arthur_alb1/status/1750126021985091716?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg> 

\- Shiny guide - <https://www.business-science.io/code-tools/2023/04/02/chatgpt-shiny-app.html> 

More Shiny - <https://sites.google.com/view/ben-prytherch-shiny-apps/shiny-apps> (is the code for these available?) 

Venn <https://x.com/strnr/status/1744288923411513429?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg> 

\[ \] tables <https://x.com/vincentab/status/1774405541822910875?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

\[ \] more tables - <https://luisdva.github.io/rstats/clean-merged/> 

gt_plot_summary Viz <https://x.com/rappa753/status/1695106452485263672?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Gt extra: <https://jthomasmock.github.io/gtExtras/articles/plotting-with-gtExtras.html> and Gt <https://gt.rstudio.com/> 

Df summary <https://x.com/rappa753/status/1695709747289415801?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg> 

Modifiable tables <https://x.com/rappa753/status/1697610322818015556?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Beginners guide to Data visualization <https://x.com/parajulisaroj16/status/1694909563739205860?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>

Naniar - visualization of missing data  <https://cran.r-project.org/web/packages/naniar/vignettes/getting-started-w-naniar.html> 

Making consort diagrams: <https://x.com/_Riinu_/status/1754479220175114271?s=20> 

Violin plot 

<https://x.com/joachimschork/status/1851648860432507086?s=46&t=5eJ6uoTQrbbYTlHIOnRYRg>
